
-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 68 characters

local ScriptFunctions = {
function(script,require)
-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 5868 characters
local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AEASASEFTW9kZWwhBE5hbWUhDVJpZyBBY2Nlc3NvcnkhCldvcmxkUGl2b3QEwwDEAMUAIQNSaWchC1ByaW1hcnlQYXJ0BMYAxADFACEEUGFydCEESGVhZCEKQnJpY2tDb2xvcgfiACEGQ0ZyYW1lBBQAxADFACEFQ29sb3IG/eqNIQtQaXZvdE9mZnNldATHAMQAxQAh'
..'CFBvc2l0aW9uCivccUIAAJBAMDN7QSEEU2l6ZQoAAABAAACAPwAAgD8hClRvcFN1cmZhY2UDAAAAAAAAAAAhC1NwZWNpYWxNZXNoIQVTY2FsZQoAAKA/AACgPwAAoD8hBVRvcnNvBxwABCIAxADFAAYof0chC0xlZnRTdXJmYWNlAwAAAAAAAABACivccUIAAEBAMDN7'
..'QSEMUmlnaHRTdXJmYWNlCgAAAEAAAABAAACAPyEFRGVjYWwhBnJvYmxveCEHTW90b3I2RCEOUmlnaHQgU2hvdWxkZXIhAkMwBMgAyQDFACECQzEEygDJAMUAIQVQYXJ0MCEFUGFydDEhC01heFZlbG9jaXR5AwAAAKCZmbk/IQ1MZWZ0IFNob3VsZGVyBMsAzADFAATN'
..'AMwAxQAhCVJpZ2h0IEhpcATOAMkAxQAEzwDJAMUAIQhMZWZ0IEhpcATQAMwAxQAE0QDMAMUAIQROZWNrBMUA0gDMAATTANIAzAAhCExlZnQgQXJtBEEAxADFACEKQ2FuQ29sbGlkZQIKK9xrQgAAQEAwM3tBCgAAgD8AAABAAACAPyEJUmlnaHQgQXJtBEUAxADFAAor'
..'3HdCAABAQDAze0EhCExlZnQgTGVnIQ1Cb3R0b21TdXJmYWNlBxcABEsAxADFAAYNaawKK9xvQgAAgD8wM3tBIQlSaWdodCBMZWcETgDEAMUACivcc0IAAIA/MDN7QSEISHVtYW5vaWQhCEFuaW1hdG9yIRNIdW1hbm9pZERlc2NyaXB0aW9uIQlIZWFkQ29sb3IGf39/'
..'IQxMZWZ0QXJtQ29sb3IhDExlZnRMZWdDb2xvciENUmlnaHRBcm1Db2xvciENUmlnaHRMZWdDb2xvciEKVG9yc29Db2xvciEQSHVtYW5vaWRSb290UGFydAfHAAZjX2IhDFRyYW5zcGFyZW5jeQMAAAAAAADwPyEJUm9vdEpvaW50BNQA0gDMACEKQm9keUNvbG9ycyEK'
..'SGVhZENvbG9yMwZjX2IHswAhDUxlZnRBcm1Db2xvcjMhDUxlZnRMZWdDb2xvcjMhDlJpZ2h0QXJtQ29sb3IzIQ5SaWdodExlZ0NvbG9yMyELVG9yc29Db2xvcjMhFkJhY2sgQWNjZXNzb3J5IFNwaWRlciAE1QDEANYAIQVQYXJ0OAdMAQRzANcA2AAGdQAAIQhNYXRl'
..'cmlhbAMAAAAAAABxQCELT3JpZW50YXRpb24KAAAAAAAAAAAAAEhCCoW6dUKiY4VAZLSBQSEIUm90YXRpb24KXI+yP6Rw/T57FC4+IQpNYW51YWxXZWxkIQRXZWxkBNQA2QDaAATbANwA3QAEfADeAN8ACgAAAAAAAAAAAAA0Qgqb43hCEZ+CQGO0gUEKg+vRPsL16D97'
..'FC4+BNQA4ADhAATiANwA3QAhBVBhcnQzBIMA4wDkAAoAAAAAAAAAAAAAIEIKPQ15QvxgOUBktIFBCkbh+j4zMwtAexQuPgTUAOUA5gAE5wDcAN0AIQVQYXJ0NASJANcA2AAKhbp1QoRgTEBitIFBBOgA3ADdACEFUGFydDkEjgDpAOoACgAAAAAAADRDAABIQgrdBm5C'
..'hmBMQGK0gUEKAAA0QwAAAAAAAALDBNQA6wDsAATtANwA3QAhBlBhcnQxMASVAO4A7wAKAAAAAAAANEMAACBCCh20akIHYTlAY7SBQQoAADRDAAAAAAAADMME1ADwAPEABPIA8wD0ACEGUGFydDExBJwA9QD2AAoAAAAAAAA0QwAANEIKxN1qQvaegkBjtIFBCgAANEMA'
..'AAAAAAAHwwTUAPcA+AAE+QD6APsAIQZQYXJ0MTIEogD8AP0ACucGbkJIY4VAYrSBQQTUAP4A/wAEAAEBAQIBIQVQYXJ0NwcaAASqAAMBBAEGGyo1CgAAcMIAAAAAAAAAAAo3CnBCDuxhQHgUhEEK9CjcPgrXkz/1KBw/BNQABQEGAQQHAdwA3QAhBVBhcnQyBLEACAEJ'
..'AQoAAMjBAAAAAAAAAAAKMQpwQqG1PUCoDIlBCvQo3D4Urpc/E64HPwTUAAoBCwEEDAHcAN0AIQVQYXJ0NQS3AAMBDQEKT7hzQqG1PUCpDIlBBNQADgEPAQQQAdwA3QAhBVBhcnQ2BLwAAwEEAQpPuHNCDuxhQHgUhEEEEQHcAN0AIQRNYWluBMAAxADFAAor3HFCmplZ'
..'QMvMgkEKULgeP7geZT/gepQ+BBIBxADFAAqt4HFCAAAgQHlJg0EKAACAPwAAAAAAAAAACgAAAAAAAIA/AAAAAAor3HFCAAAAADAze0EKAAAAAAAAkMAAAAAACgAAgD8AAAA/AAAAAAoAAAAAAAAAAAAAgL8KAAAAvwAAAD8AAAAACgAAgL8AAAA/AAAAAAoAAAAAAAAA'
..'AAAAgD8KAAAAPwAAAD8AAAAACgAAgD8AAIC/AAAAAAoAAAA/AACAPwAAAAAKAACAvwAAgL8AAAAACgAAAL8AAIA/AAAAAAoAAIC/AAAAAAAAAAAKAAAAAAAAAL8AAAAACgAAAAAAAAAAAAAAAArT5XFCfHZTQHsnhEEKAAAAAAAAAD/Xs12/Cq6NJD+HG0Q/D9KAMwqJ'
..'G0S/r40kPx6brTMK240kP6UbRL/MvkgyCq8bRD/ljSQ/AAAAAAqAlnc/qLZEP4AzDL4KHQCAPwAAAADAYxSwCgAAwLMlAIA/+iKpMwrqBDU//AQ1PxKObTMK/QQ1v+oENT8qq+EyCgYFNT8GBTW/CHopMgoMBTU/DQU1PwAAAAAKAO7gPyCSLj8ANAy+CqwbRD/vjSQ/'
..'ttSLMwrkjSS/uhtEP7dPgjMKgRtEP76NJL/gI/qwCr+NJD+BG0Q/AAAAAApAIuY/eOIAv4AzDL4KgJZ3P2CRU76ANAy+Cq+NJL+HG0Q/aZ8EMwqHG0Q/r40kP4TUizMK240kv6UbRD/MvkiyCrAbRD/jjSQ/AAAAAAqAU3W/QJFTvoA0DL4KqhtEv+mNJD/INlszCt6N'
..'JD+1G0Q/LdKAMwp+G0S/u40kPwAAAAAKu40kP34bRD8AAAAACsAB5b9M4gC/ADQMvgocAIA/OqGEpoBjFLAKAACAsyQAgD/6IqkzCuoENb/9BDU/PYFYMwr8BDU/6QQ1P9uHETMKHAU1vxoFNT/IvkiyCiYFNT8mBTU/AAAAAArgzN+/SJEuPwA0DL4KHgCAPwAAADO8'
..'vkiyCgAAAAAkAIA/uf9/MwqwjSS/hxtEPzUJAbIKhhtEP7CNJD/BG7OyCt+NJL+qG0Q/yL5Isgq0G0Q/6Y0kPwAAAAAKAFF1v9SzRD+ANAy+Ch0AgD9JKq2zyL5IMgpHKq2zJACAPwAAAAAKAACAP1NFS7OgDFUxCtJV4jIzAAA/u7NdvwoZAIA/03HYsphqzbIKbkVL'
..'syAAAD8OtF0/CgD66L5AJwU+gNYjPgoeAIA/OADAM6ZfbjIKoo08tBAEaD9rYdi+CgEAgD8AAMCzAAAAswoAAMAzzANoP21h2D4KAP3ovsgf376g+0c/Cn7aPTPgA2g/DGHYvgoZAIA/wY8Ts6h6sLEKbkVLswUEaD+lYdg+CgAS7j7IH9++wPtHPwoAEu4+QCcFPoDW'
..'Iz4KAAAAAM3MzL5mZia/MAEAAAIAAgADAAQABQABAAECAAIABgAEAAgACQACCAACAAoACwAMAA0ADgAPABAAEQASABMAFAAVABYAFwAYABkAAwEAGgAbAAkAAggAAgAcAAsAHQANAB4ADwAfACAAIQATACIAIwAhABUAJAAlAAUBAAIAJgAnAAUEAAIAKAApACoAKwAs'
..'AC8AMAAnAAUEAAIAMQApADIAKwAzAC8AMAAnAAUEAAIANAApADUAKwA2AC8AMAAnAAUEAAIANwApADgAKwA5AC8AMAAnAAUEAAIAOgApADsAKwA8AC8AMAAJAAIHAAIAPQALAAwADQA+AD8AQAAPABAAEwBBABUAQgAJAAIHAAIAQwALAAwADQBEAD8AQAAPABAAEwBF'
..'ABUAQgAJAAIIAAIARgBHABgACwBIAA0ASQA/AEAADwBKABMASwAVAEIACQACCAACAEwARwAYAAsASAANAE0APwBAAA8ASgATAE4AFQBCAE8AAgAAUAAQAABRABAGAFIAUwBUAFMAVQBTAFYAUwBXAFMAWABTAAkAAgoAAgBZAEcAGAALAFoADQAeAD8AQAAPAFsAEwAi'
..'ABUAJAAXABgAXABdACcAEwQAAgBeACkAXwArAF8ALwAwAGAAAgwAUgBaAGEAYgBUAGMAZABTAFUAYwBlAFMAVgBjAGYAUwBXAGMAZwBTAFgAYwBoAFMAAQABAgACAGkABABqAAkAFgsAAgBrAEcAGAALAGwADQBtAA8AbgBvAHAAcQByABMAcwB0AHIAFQB1ABcAGAB2'
..'ABcDAAIAdwApAHgAKwB5AAkAFgsAAgAuAEcAGAALAGwADQB6AA8AbgBvAHAAcQB7ABMAfAB0AHsAFQB9ABcAGAB2ABkDAAIAdwApAH4AKwB/AAkAFgsAAgCAAEcAGAALAGwADQCBAA8AbgBvAHAAcQCCABMAgwB0AIIAFQCEABcAGAB2ABsDAAIAdwApAIUAKwCGAAkA'
..'FgsAAgCHAEcAGAALAGwADQCIAA8AbgBvAHAAcQByABMAiQB0AHIAFQB1ABcAGAB2AB0DAAIAdwApAHgAKwCKAAkAFgsAAgCLAEcAGAALAGwADQCMAA8AbgBvAHAAcQCNABMAjgB0AI8AFQB1ABcAGAB2AB8DAAIAdwApAJAAKwCRAAkAFgsAAgCSAEcAGAALAGwADQCT'
..'AA8AbgBvAHAAcQCUABMAlQB0AJYAFQCEABcAGAB2ACEDAAIAdwApAJcAKwCYAAkAFgsAAgCZAEcAGAALAGwADQCaAA8AbgBvAHAAcQCbABMAnAB0AJ0AFQB9ABcAGAB2ACMDAAIAdwApAJ4AKwCfAAkAFgsAAgCgAEcAGAALAGwADQChAA8AbgBvAHAAcQCNABMAogB0'
..'AI8AFQB1ABcAGAB2ACUDAAIAdwApAKMAKwCkAAkAFgsAAgClAEcAGAALAKYADQCnAA8AqABvAHAAcQCpABMAqgB0AKkAFQCrABcAGAB2ACcDAAIAdwApAKwAKwCtAAkAFgsAAgCuAEcAGAALAKYADQCvAA8AqABvAHAAcQCwABMAsQB0ALAAFQCyABcAGAB2ACkDAAIA'
..'dwApALMAKwC0AAkAFgsAAgC1AEcAGAALAKYADQC2AA8AqABvAHAAcQCwABMAtwB0ALAAFQCyABcAGAB2ACsDAAIAdwApALgAKwC5AAkAFgsAAgC6AEcAGAALAKYADQC7AA8AqABvAHAAcQCpABMAvAB0AKkAFQCrABcAGAB2AC0DAAIAdwApAKwAKwC9AAkAFgkAAgC+'
..'AEcAGAALAKYADQC/AA8AqABvAHAAEwDAABUAwQAXABgAdwAvAQApAMIAJwIHAAMHLQAFBy4ADQgtAAUILgAMCS0ABQkuAA8KLQAFCi4ADgstAAULLgADFC0AExQuAAUYLQAXGC4ALxotABkaLgAvHC0AGxwuAC8eLQAdHi4ALyAtAB8gLgAvIi0AISIuAC8kLQAjJC4A'
..'LyYtACUmLgAvKC0AJyguAC8qLQApKi4ALywtACssLgAvLi0ALS4uAC8wLQAvMC4ABQ==')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end

end
}
local ScriptIndex = 0
local Scripts,ModuleScripts,ModuleCache = {},{},{}
local _require = require
function require(obj,...)
	local index = ModuleScripts[obj]
	if not index then
		local a,b = pcall(_require,obj,...)
		return not a and error(b,2) or b
	end
	
	local res = ModuleCache[index]
	if res then return res end
	res = ScriptFunctions[index](obj,require)
	if res==nil then error("Module code did not return exactly one value",2) end
	ModuleCache[index] = res
	return res
end
local function Script(obj,ismodule)
	ScriptIndex = ScriptIndex + 1
	local t = ismodule and ModuleScripts or Scripts
	t[obj] = ScriptIndex
end

function RunScripts()
	for script,index in pairs(Scripts) do
		coroutine.wrap(ScriptFunctions[index])(script,require)
	end
end


local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AAADIQZTY3JpcHQhBE5hbWUhF1JpZyBBY2Nlc3NvcnlfQ29udmVydGVkAQEAAQACAwA='
..'')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end

RunScripts()
